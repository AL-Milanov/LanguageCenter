// <auto-generated />
using System;
using LanguageCenter.Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace LanguageCenter.Infrastructure.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20220425191538_InitialDataSeed")]
    partial class InitialDataSeed
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("ApplicationUserCourse", b =>
                {
                    b.Property<string>("CoursesId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("StudentsId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("CoursesId", "StudentsId");

                    b.HasIndex("StudentsId");

                    b.ToTable("ApplicationUserCourse");
                });

            modelBuilder.Entity("LanguageCenter.Infrastructure.Data.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(55)
                        .HasColumnType("nvarchar(55)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(70)
                        .HasColumnType("nvarchar(70)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("LanguageCenter.Infrastructure.Data.Models.Certificate", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ApplicationUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CourseTitle")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.Property<double>("Grade")
                        .HasColumnType("float");

                    b.Property<DateTime>("IssueDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("StudentFullName")
                        .IsRequired()
                        .HasMaxLength(125)
                        .HasColumnType("nvarchar(125)");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserId");

                    b.ToTable("Certificates");
                });

            modelBuilder.Entity("LanguageCenter.Infrastructure.Data.Models.Course", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<short>("Capacity")
                        .HasColumnType("smallint");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<short>("DurationInMonths")
                        .HasColumnType("smallint");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("LanguageId")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Level")
                        .IsRequired()
                        .HasMaxLength(2)
                        .HasColumnType("nvarchar(2)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("TeacherId")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.HasKey("Id");

                    b.HasIndex("LanguageId");

                    b.HasIndex("TeacherId");

                    b.ToTable("Courses");

                    b.HasData(
                        new
                        {
                            Id = "493c4e29-e1ea-43ae-a3b7-10cc7d0b7afc",
                            Capacity = (short)12,
                            Description = "Настоящия курс, ще ви даде базови езикови познания. Започвайки с изучаване на азбуката, трите основки групи езикови времена и други базови езикови познания.",
                            DurationInMonths = (short)3,
                            EndDate = new DateTime(2022, 4, 7, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LanguageId = "ab32b9ec-6e77-465f-86ff-e9c4a7a296ea",
                            Level = "A1",
                            StartDate = new DateTime(2022, 4, 4, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Английски за начинаещи"
                        },
                        new
                        {
                            Id = "16b7802b-c7eb-4fa7-87ab-b1ff10838b11",
                            Capacity = (short)12,
                            Description = "Настоящия курс, ще ви помогне да развиете вашите езикови познания. Курса се фокусира върху пресъздаване естествената среда на общуване и поставят акцент върху практическата употреба на езика.",
                            DurationInMonths = (short)3,
                            EndDate = new DateTime(2022, 4, 8, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LanguageId = "ab32b9ec-6e77-465f-86ff-e9c4a7a296ea",
                            Level = "B1",
                            StartDate = new DateTime(2022, 4, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Английски за напреднали"
                        },
                        new
                        {
                            Id = "61c3d3e4-295d-4b0c-9973-7e2c4bda6066",
                            Capacity = (short)12,
                            Description = "Настоящия курс, се фокусира върху усъвършенстване на вашите езикови уменя, пресъздава естествената среда на общуване и поставят акцент върху практическата употреба на езика.Основната цел на курса е активирането и развиването на четирите основни езикови умения (четене, писане, слушане и говорене).",
                            DurationInMonths = (short)3,
                            EndDate = new DateTime(2022, 5, 8, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LanguageId = "ab32b9ec-6e77-465f-86ff-e9c4a7a296ea",
                            Level = "C1",
                            StartDate = new DateTime(2022, 5, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Професионален английски"
                        },
                        new
                        {
                            Id = "bd9b882f-4827-4295-89e5-25cb644b10c9",
                            Capacity = (short)12,
                            Description = "Настоящия курс, ще ви даде базови езикови познания. Започвайки с изучаване на азбуката, трите основки групи езикови времена и други базови езикови познания.",
                            DurationInMonths = (short)4,
                            EndDate = new DateTime(2022, 4, 7, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LanguageId = "8ead3f2d-c261-4aa0-b0cd-ab0b8f4c599a",
                            Level = "A1",
                            StartDate = new DateTime(2022, 3, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Немски за начинаещи"
                        },
                        new
                        {
                            Id = "3999db9d-6001-440e-a592-99501ec98ceb",
                            Capacity = (short)12,
                            Description = "Настоящия курс, ще ви помогне да развиете вашите езикови познания. Курса се фокусира върху пресъздаване естествената среда на общуване и поставят акцент върху практическата употреба на езика.",
                            DurationInMonths = (short)4,
                            EndDate = new DateTime(2022, 4, 7, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LanguageId = "8ead3f2d-c261-4aa0-b0cd-ab0b8f4c599a",
                            Level = "B1",
                            StartDate = new DateTime(2022, 3, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Немски за напреднали"
                        },
                        new
                        {
                            Id = "caed6960-44a7-4916-8461-3e89710de76d",
                            Capacity = (short)12,
                            Description = "Настоящия курс, се фокусира върху усъвършенстване на вашите езикови уменя, пресъздава естествената среда на общуване и поставят акцент върху практическата употреба на езика.Основната цел на курса е активирането и развиването на четирите основни езикови умения (четене, писане, слушане и говорене).",
                            DurationInMonths = (short)5,
                            EndDate = new DateTime(2022, 4, 8, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LanguageId = "8ead3f2d-c261-4aa0-b0cd-ab0b8f4c599a",
                            Level = "C1",
                            StartDate = new DateTime(2022, 3, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Професионален немски"
                        },
                        new
                        {
                            Id = "bdbace89-cc4c-46d1-80fb-85704fc3297f",
                            Capacity = (short)12,
                            Description = "Настоящия курс, ще ви даде базови езикови познания. Започвайки с изучаване на азбуката, трите основки групи езикови времена и други базови езикови познания.",
                            DurationInMonths = (short)4,
                            EndDate = new DateTime(2022, 4, 7, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LanguageId = "7062a927-849c-4145-8d60-463ca44d72c9",
                            Level = "A1",
                            StartDate = new DateTime(2022, 3, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Италиански за начинаещи"
                        },
                        new
                        {
                            Id = "dda416a4-f7fe-424d-b949-41b383b870ba",
                            Capacity = (short)12,
                            Description = "Настоящия курс, ще ви помогне да развиете вашите езикови познания. Курса се фокусира върху пресъздаване естествената среда на общуване и поставят акцент върху практическата употреба на езика",
                            DurationInMonths = (short)4,
                            EndDate = new DateTime(2022, 4, 7, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LanguageId = "7062a927-849c-4145-8d60-463ca44d72c9",
                            Level = "B1",
                            StartDate = new DateTime(2022, 3, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Италиански за напреднали"
                        },
                        new
                        {
                            Id = "e6faff72-790b-43e0-ab32-777db89e2008",
                            Capacity = (short)12,
                            Description = "Настоящия курс, се фокусира върху усъвършенстване на вашите езикови уменя, пресъздава естествената среда на общуване и поставят акцент върху практическата употреба на езика.Основната цел на курса е активирането и развиването на четирите основни езикови умения (четене, писане, слушане и говорене).",
                            DurationInMonths = (short)4,
                            EndDate = new DateTime(2022, 4, 7, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LanguageId = "7062a927-849c-4145-8d60-463ca44d72c9",
                            Level = "C1",
                            StartDate = new DateTime(2022, 3, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Професионален италиански"
                        },
                        new
                        {
                            Id = "4421015c-fdca-4cf6-8927-b1a95a6424d6",
                            Capacity = (short)12,
                            Description = "Настоящия курс, ще ви даде базови езикови познания. Започвайки с изучаване на азбуката, трите основки групи езикови времена и други базови езикови познания.",
                            DurationInMonths = (short)4,
                            EndDate = new DateTime(2022, 4, 7, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LanguageId = "d920c0a9-f0a1-4174-92bd-f2310f65d989",
                            Level = "A1",
                            StartDate = new DateTime(2022, 3, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Испански за начинаещи"
                        },
                        new
                        {
                            Id = "ee6128a6-c014-4678-9688-51268f57550e",
                            Capacity = (short)12,
                            Description = "Настоящия курс, ще ви помогне да развиете вашите езикови познания. Курса се фокусира върху пресъздаване естествената среда на общуване и поставят акцент върху практическата употреба на езика.",
                            DurationInMonths = (short)4,
                            EndDate = new DateTime(2022, 4, 7, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LanguageId = "d920c0a9-f0a1-4174-92bd-f2310f65d989",
                            Level = "B1",
                            StartDate = new DateTime(2022, 3, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Испански за напреднали"
                        },
                        new
                        {
                            Id = "b6af2168-5a09-4560-879b-986a2290517c",
                            Capacity = (short)12,
                            Description = "Настоящия курс, се фокусира върху усъвършенстване на вашите езикови уменя, пресъздава естествената среда на общуване и поставят акцент върху практическата употреба на езика.Основната цел на курса е активирането и развиването на четирите основни езикови умения (четене, писане, слушане и говорене).",
                            DurationInMonths = (short)4,
                            EndDate = new DateTime(2022, 4, 7, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LanguageId = "d920c0a9-f0a1-4174-92bd-f2310f65d989",
                            Level = "C1",
                            StartDate = new DateTime(2022, 3, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Професионален испански"
                        },
                        new
                        {
                            Id = "3a7d3e93-8ae8-4ff8-8f7b-be355762f5c8",
                            Capacity = (short)12,
                            Description = "Настоящия курс, ще ви даде базови езикови познания. Започвайки с изучаване на азбуката, трите основки групи езикови времена и други базови езикови познания.",
                            DurationInMonths = (short)3,
                            EndDate = new DateTime(2022, 4, 7, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LanguageId = "906c70c9-ba85-45a2-a21e-9e3b1500fb16",
                            Level = "A1",
                            StartDate = new DateTime(2022, 4, 4, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Френски за начинаещи"
                        },
                        new
                        {
                            Id = "90abf697-d492-4786-af2f-0d6089be2994",
                            Capacity = (short)12,
                            Description = "Настоящия курс, се фокусира върху усъвършенстване на вашите езикови уменя, пресъздава естествената среда на общуване и поставят акцент върху практическата употреба на езика.Основната цел на курса е активирането и развиването на четирите основни езикови умения (четене, писане, слушане и говорене).",
                            DurationInMonths = (short)3,
                            EndDate = new DateTime(2022, 4, 7, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LanguageId = "906c70c9-ba85-45a2-a21e-9e3b1500fb16",
                            Level = "B1",
                            StartDate = new DateTime(2022, 4, 4, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Френски за напреднали"
                        },
                        new
                        {
                            Id = "5a4c0357-fa81-4a75-af64-b83cb7167eb3",
                            Capacity = (short)12,
                            Description = "Настоящия курс, ще ви даде базови езикови познания. Започвайки с изучаване на азбуката, трите основки групи езикови времена и други базови езикови познания.",
                            DurationInMonths = (short)3,
                            EndDate = new DateTime(2022, 4, 7, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LanguageId = "906c70c9-ba85-45a2-a21e-9e3b1500fb16",
                            Level = "C1",
                            StartDate = new DateTime(2022, 4, 4, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Професионален френски"
                        },
                        new
                        {
                            Id = "b46618ac-1804-4445-801b-5f384948d429",
                            Capacity = (short)12,
                            Description = "Настоящия курс, ще ви даде базови езикови познания. Започвайки с изучаване на азбуката, трите основки групи езикови времена и други базови езикови познания.",
                            DurationInMonths = (short)3,
                            EndDate = new DateTime(2022, 4, 7, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LanguageId = "906c70c9-ba85-45a2-a21e-9e3b1500fb16",
                            Level = "C1",
                            StartDate = new DateTime(2022, 4, 4, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Професионален френски"
                        });
                });

            modelBuilder.Entity("LanguageCenter.Infrastructure.Data.Models.Language", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.Property<string>("NormalizedName")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.HasKey("Id");

                    b.ToTable("Languages");

                    b.HasData(
                        new
                        {
                            Id = "ab32b9ec-6e77-465f-86ff-e9c4a7a296ea",
                            Name = "English",
                            NormalizedName = "ENGLISH"
                        },
                        new
                        {
                            Id = "8ead3f2d-c261-4aa0-b0cd-ab0b8f4c599a",
                            Name = "German",
                            NormalizedName = "GERMAN"
                        },
                        new
                        {
                            Id = "7062a927-849c-4145-8d60-463ca44d72c9",
                            Name = "Italian",
                            NormalizedName = "ITALIAN"
                        },
                        new
                        {
                            Id = "04507fe5-8edf-4348-b7f2-4b78a2136cf8",
                            Name = "Greek",
                            NormalizedName = "GREEK"
                        },
                        new
                        {
                            Id = "d920c0a9-f0a1-4174-92bd-f2310f65d989",
                            Name = "Spanish",
                            NormalizedName = "SPANISH"
                        },
                        new
                        {
                            Id = "906c70c9-ba85-45a2-a21e-9e3b1500fb16",
                            Name = "French",
                            NormalizedName = "FRENCH"
                        });
                });

            modelBuilder.Entity("LanguageCenter.Infrastructure.Data.Models.Teacher", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Description")
                        .HasMaxLength(400)
                        .HasColumnType("nvarchar(400)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Teachers");
                });

            modelBuilder.Entity("LanguageTeacher", b =>
                {
                    b.Property<string>("LanguagesId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("TeachersId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LanguagesId", "TeachersId");

                    b.HasIndex("TeachersId");

                    b.ToTable("LanguageTeacher");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("ApplicationUserCourse", b =>
                {
                    b.HasOne("LanguageCenter.Infrastructure.Data.Models.Course", null)
                        .WithMany()
                        .HasForeignKey("CoursesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LanguageCenter.Infrastructure.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("StudentsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("LanguageCenter.Infrastructure.Data.Models.Certificate", b =>
                {
                    b.HasOne("LanguageCenter.Infrastructure.Data.Models.ApplicationUser", null)
                        .WithMany("Certificates")
                        .HasForeignKey("ApplicationUserId");
                });

            modelBuilder.Entity("LanguageCenter.Infrastructure.Data.Models.Course", b =>
                {
                    b.HasOne("LanguageCenter.Infrastructure.Data.Models.Language", "Language")
                        .WithMany()
                        .HasForeignKey("LanguageId");

                    b.HasOne("LanguageCenter.Infrastructure.Data.Models.Teacher", "Teacher")
                        .WithMany("Courses")
                        .HasForeignKey("TeacherId");

                    b.Navigation("Language");

                    b.Navigation("Teacher");
                });

            modelBuilder.Entity("LanguageCenter.Infrastructure.Data.Models.Teacher", b =>
                {
                    b.HasOne("LanguageCenter.Infrastructure.Data.Models.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("LanguageTeacher", b =>
                {
                    b.HasOne("LanguageCenter.Infrastructure.Data.Models.Language", null)
                        .WithMany()
                        .HasForeignKey("LanguagesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LanguageCenter.Infrastructure.Data.Models.Teacher", null)
                        .WithMany()
                        .HasForeignKey("TeachersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("LanguageCenter.Infrastructure.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("LanguageCenter.Infrastructure.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LanguageCenter.Infrastructure.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("LanguageCenter.Infrastructure.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("LanguageCenter.Infrastructure.Data.Models.ApplicationUser", b =>
                {
                    b.Navigation("Certificates");
                });

            modelBuilder.Entity("LanguageCenter.Infrastructure.Data.Models.Teacher", b =>
                {
                    b.Navigation("Courses");
                });
#pragma warning restore 612, 618
        }
    }
}
